name: Zadanie 1 (cz. dodatkowa 1) - FibCalc workflow

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Value used for semver version tag (eg. 1.0.0)"
        required: true
        default: "1.0.0"

env:
  #image registry
  REGISTRY: ghcr.io
  #cache registry
  CACHE_REGISTRY: docker.io
  #github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  #OCI tarball file name
  ARCHIVE: oci.tar

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      #Set up docker + buildx
      - name: Buildx set-up
        id: buildx
        uses: docker/setup-buildx-action@v2.2.1

      #Set up QEMU
      - name: Docker Setup QEMU
        uses: docker/setup-qemu-action@v2.1.0

      #Log into ghcr.io
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      #Log into docker.io
      - name: Log into registry ${{ env.CACHE_REGISTRY }}
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4.1.1
        with:
          # list of Docker images to use as base name for tags
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # generate Docker tags based on version
          tags: type=semver,pattern={{version}},value=v${{ github.event.inputs.version }}

      #Build OCI image tarball and import/export cache
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile_dod1
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          outputs: type=oci,dest=${{ env.ARCHIVE }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache-dod1
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache-dod1,mode=max

      #Push OCI image to ghcr.io
      - name: Push OCI archive to remote registry
        uses: pr-mpt/actions-push-oci-archive-to-registry@v1
        with:
          archive: ${{ env.ARCHIVE }}:latest
          tag: ${{ github.event.inputs.version }}-dod1

      #Remove tar file
      - name: Remove oci image
        run: |
          rm -f ${{ env.ARCHIVE }}
